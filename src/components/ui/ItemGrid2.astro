---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

<!-- ----------------------------------------------- OLD ItemGrid2.astro ---------------------------
{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => (
        <div
          class={twMerge(
            'relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >

            {(icon || defaultIcon) && (
              icon?.match(/\.(png|jpe?g|gif|svg|webp)$/i) ? (
                <img
                  src={icon}
                  alt={title}
                  class={twMerge('mb-2 w-24 h-24 object-contain', defaultIconClass, itemClasses?.icon)}
                />
              ) : (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge('mb-2 w-15 h-15', defaultIconClass, itemClasses?.icon)}
                />
              )
            )}


          {/* {(icon || defaultIcon) && (
            <Icon name={icon || defaultIcon} class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon)} />
          )} */}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      ))}
    </div>
  )
} ----------------------------------------------------------------------------------------->

{items && items.length > 0 && (
  <div
    class={twMerge(
      `grid gap-8 gap-x-12 sm:gap-y-8 ${
        columns === 4
          ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
          : columns === 3
          ? 'lg:grid-cols-3 sm:grid-cols-2'
          : columns === 2
          ? 'sm:grid-cols-2'
          : ''
      }`,
      containerClass
    )}
  >
    {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => {
      // Determine if the icon is an image based on its file extension
      const isImage = icon?.match(/\.(png|jpe?g|gif|svg|webp)$/i);
      // Set the background image style if it's an image
      const backgroundImageStyle = isImage
        ? `background-image: url('${icon}'); background-size: cover; background-position: center; background-repeat: no-repeat; background-blend-mode: overlay; background-color: rgba(0,0,0,0.35);`
        : '';
      return (
        <div
          class={twMerge(
            'relative flex flex-col justify-end p-6 rounded-lg shadow-lg text-white',
            panelClass,
            itemClasses?.panel
          )}
          style={backgroundImageStyle}
        >
          {/* If the icon is not an image, render it as an icon component */}
          {!isImage && (icon || defaultIcon) && (
            <Icon
              name={icon || defaultIcon}
              class={twMerge('mb-2 w-15 h-15', defaultIconClass, itemClasses?.icon)}
            />
          )}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {description && (
            <p
              class={twMerge('text-m mt-2', descriptionClass, itemClasses?.description)}
              set:html={description}
            />
          )}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      );
    })}
  </div>
)}
